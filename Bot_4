import random
from flask import Flask, request, jsonify
from typing import Tuple

app = Flask(__name__)

DB = {}  # База даних агентів
CONTEXT = {
    'round': 0,
    'map': None,
    'size': None,
}

# Тип відповіді
StrResponse = Tuple[str, int]

# Перевірка сервера
@app.route('/health')
def health() -> StrResponse:
    return '', 200

# Ініціалізація карти
@app.route('/init', methods=['POST'])
def init() -> StrResponse:
    size = request.json.get('map_size')
    if not size:
        return jsonify({'error': 'Missing map_size in request'}), 400

    CONTEXT['map'] = [[None] * size for _ in range(size)]
    CONTEXT['size'] = size

    global DB
    DB = {}  # Очищення бази даних агентів

    return '', 200

# Обробка нового раунду
@app.route('/round', methods=['POST'])
def round_route() -> StrResponse:
    round_number = request.json.get('round')
    if round_number is None:
        return jsonify({'error': 'Missing round number'}), 400

    CONTEXT['round'] = round_number
    return '', 200

# Отримання дії агента
@app.route('/agent/<int:agent_id>/action', methods=['GET'])
def get_action(agent_id: int):
    agent = DB.get(agent_id)
    if not agent:
        return jsonify({'error': 'Agent not found'}), 404

    if agent['type'] == 'FACTORY':
        # Створення інженера, якщо його ще немає
        if sum(1 for a in DB.values() if a.get('type') == 'ENGINEER_BOT') < 2:
            return jsonify({
                'type': 'BUILD_BOT',
                'params': {'d_loc': random.choice([[-1, 0], [0, 1], [1, 0], [0, -1]])}
            })
        # Створення вітряка, якщо ресурси закінчуються
        elif sum(agent['warehouse'].values()) < 1:
            return jsonify({
                'type': 'ASSEMBLE_POWER_PLANT',
                'params': {'power_type': 'WINDMILL'}
            })
        else:
            return jsonify({'type': 'NONE'})

    if agent['type'] == 'ENGINEER_BOT':
        x, y = agent.get('location', (0, 0))
        map_cell = CONTEXT['map'][x][y] if 0 <= x < CONTEXT['size'] and 0 <= y < CONTEXT['size'] else None

        if map_cell is None:
            return jsonify({
                'type': "MOVE",
                "params": {'d_loc': random.choice([[-1, 0], [0, 1], [1, 0], [0, -1]])}
            })
        elif map_cell.get('type') == 'OCEAN':
            return jsonify({
                'type': 'DEPLOY',
                'params': {'power_type': 'WINDMILL', 'd_loc': [0, 0]}
            })
        else:
            return jsonify({
                'type': 'MOVE',
                'params': {'d_loc': random.choice([[-1, 0], [0, 1], [1, 0], [0, -1]])}
            })

    return jsonify({'type': 'NONE'})

# Оновлення інформації про агента
@app.route('/agent/<int:agent_id>', methods=['DELETE', 'POST', 'PATCH'])
def update_agent(agent_id: int) -> StrResponse:
    if request.method == 'POST':
        DB[agent_id] = request.json
    elif request.method == 'PATCH':
        if agent_id in DB:
            DB[agent_id].update(request.json)
        else:
            return jsonify({'error': 'Agent not found'}), 404
    elif request.method == 'DELETE':
        DB.pop(agent_id, None)

    return '', 200

# Оновлення карти на основі досліджень агента
@app.route('/agent/<int:agent_id>/view', methods=['POST'])
def explore(agent_id: int) -> StrResponse:
    new_map = request.json.get('map')
    if not new_map or len(new_map) != CONTEXT['size']:
        return jsonify({'error': 'Invalid or missing map'}), 400

    for x in range(CONTEXT['size']):
        for y in range(CONTEXT['size']):
            CONTEXT['map'][x][y] = new_map[x][y] or CONTEXT['map'][x][y]

    return '', 200

# Запуск сервера
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
